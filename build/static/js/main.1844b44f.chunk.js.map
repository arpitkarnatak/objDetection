{"version":3,"sources":["utilities.js","App.js","index.js"],"names":["drawRect","detections","ctx","forEach","predictions","x","y","width","height","text","String","parseInt","parseFloat","strokeStyle","font","fillStyle","beginPath","fillText","rect","stroke","App","webcamRef","useRef","canvasRef","runCoco","a","cocossd","net","setInterval","detect","current","video","readyState","videoWidth","videoHeight","obj","console","log","getContext","useEffect","className","ref","muted","style","position","marginLeft","marginRight","left","right","textAlign","zindex","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+ZAAaA,EAAW,SAACC,EAAYC,GACjCD,EAAWE,SAAQ,SAAAC,GAAe,IAAD,cACFA,EAAW,KADT,GACtBC,EADsB,KACpBC,EADoB,KAClBC,EADkB,KACZC,EADY,KAEvBC,EAAOL,EAAW,MAAY,KAAOM,OAAOC,SAA0C,IAAjCC,WAAWR,EAAW,SAAiB,IAIlGF,EAAIW,YADU,QAEdX,EAAIY,KAAO,iBACXZ,EAAIa,UAHU,QAMdb,EAAIc,YACJd,EAAIe,SAASR,EAAKJ,EAAEC,GACpBJ,EAAIgB,KAAKb,EAAEC,EAAEC,EAAMC,GACnBN,EAAIiB,aCwFGC,MA5Ff,WACE,IAAMC,EAAYC,iBAAO,MACnBC,EAAYD,iBAAO,MAGnBE,EAAO,uCAAG,4BAAAC,EAAA,sEAGIC,MAHJ,OAGRC,EAHQ,OAKdC,aAAY,WACVC,EAAOF,KACN,KAPW,2CAAH,qDAUPE,EAAM,uCAAG,WAAOF,GAAP,uBAAAF,EAAA,yDAGkB,qBAAtBJ,EAAUS,SACK,OAAtBT,EAAUS,SAC6B,IAAvCT,EAAUS,QAAQC,MAAMC,WALb,wBAQLD,EAAQV,EAAUS,QAAQC,MAC1BE,EAAaZ,EAAUS,QAAQC,MAAME,WACrCC,EAAcb,EAAUS,QAAQC,MAAMG,YAG5Cb,EAAUS,QAAQC,MAAMxB,MAAQ0B,EAChCZ,EAAUS,QAAQC,MAAMvB,OAAS0B,EAGjCX,EAAUO,QAAQvB,MAAQ0B,EAC1BV,EAAUO,QAAQtB,OAAS0B,EAlBhB,UAuBOP,EAAIE,OAAOE,GAvBlB,QAuBLI,EAvBK,OAwBXC,QAAQC,IAAIF,GAGNjC,EAAMqB,EAAUO,QAAQQ,WAAW,MAGzCtC,EAASmC,EAAKjC,GA9BH,4CAAH,sDAoCZ,OAFAqC,qBAAU,WAAKf,MAAW,IAGxB,yBAAKgB,UAAU,OACb,wBAAIA,UAAY,WAAhB,mCACA,4BAAQA,UAAU,cAChB,kBAAC,IAAD,CACEC,IAAKpB,EACLqB,OAAO,EACPC,MAAO,CACLC,SAAU,WACVC,WAAY,OACZC,YAAa,OACbC,KAAM,EACNC,MAAO,EACPC,UAAW,SACXC,OAAQ,EACR3C,MAAO,IACPC,OAAQ,OAIZ,4BACEiC,IAAKlB,EACLoB,MAAO,CACLC,SAAU,WACVC,WAAY,OACZC,YAAa,OACbC,KAAM,EACNC,MAAO,EAEPC,UAAW,SACXC,OAAQ,EACR3C,MAAO,IACPC,OAAQ,UCzFpB2C,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.1844b44f.chunk.js","sourcesContent":["export const drawRect = (detections, ctx) =>{\r\n    detections.forEach(predictions =>{\r\n        const [x,y,width,height] = predictions['bbox']\r\n        const text = predictions['class'] + \"  \" + String(parseInt(parseFloat(predictions['score'])*100))+\"%\"\r\n\r\n\r\n        const color = 'green'\r\n        ctx.strokeStyle = color\r\n        ctx.font = '24px helvetica'\r\n        ctx.fillStyle = color\r\n        \r\n\r\n        ctx.beginPath()\r\n        ctx.fillText(text,x,y)\r\n        ctx.rect(x,y,width,height)\r\n        ctx.stroke()\r\n\r\n    })\r\n}","// Import dependencies\r\nimport React, { useRef, useState, useEffect } from \"react\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\n// 1. TODO - Import required model here\r\n// e.g. import * as tfmodel from \"@tensorflow-models/tfmodel\";\r\nimport * as cocossd from '@tensorflow-models/coco-ssd';\r\nimport Webcam from \"react-webcam\";\r\nimport \"./App.css\";\r\n// 2. TODO - Import drawing utility here\r\nimport { drawRect } from \"./utilities\";\r\n\r\nfunction App() {\r\n  const webcamRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n\r\n  // Main function\r\n  const runCoco = async () => {\r\n    // 3. TODO - Load network \r\n    // e.g. const net = await cocossd.load();\r\n    const net = await cocossd.load()\r\n    //  Loop and detect hands\r\n    setInterval(() => {\r\n      detect(net);\r\n    }, 100);\r\n  };\r\n\r\n  const detect = async (net) => {\r\n    // Check data is available\r\n    if (\r\n      typeof webcamRef.current !== \"undefined\" &&\r\n      webcamRef.current !== null &&\r\n      webcamRef.current.video.readyState === 4\r\n    ) {\r\n      // Get Video Properties\r\n      const video = webcamRef.current.video;\r\n      const videoWidth = webcamRef.current.video.videoWidth;\r\n      const videoHeight = webcamRef.current.video.videoHeight;\r\n\r\n      // Set video width\r\n      webcamRef.current.video.width = videoWidth;\r\n      webcamRef.current.video.height = videoHeight;\r\n\r\n      // Set canvas height and width\r\n      canvasRef.current.width = videoWidth;\r\n      canvasRef.current.height = videoHeight;\r\n\r\n      // 4. TODO - Make Detections\r\n      //var obj = await net.detect(video);\r\n\r\n      const obj = await net.detect(video);\r\n      console.log(obj)\r\n\r\n      // Draw mesh\r\n      const ctx = canvasRef.current.getContext(\"2d\");\r\n\r\n      // 5. TODO - Update drawing utility\r\n      drawRect(obj, ctx)  \r\n    }\r\n  };\r\n\r\n  useEffect(()=>{runCoco()},[]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1 className = 'header1'>Object Detection using Coco-SSD</h1>\r\n      <header className=\"App-header\">\r\n        <Webcam\r\n          ref={webcamRef}\r\n          muted={true} \r\n          style={{\r\n            position: \"absolute\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            left: 0,\r\n            right: 0,\r\n            textAlign: \"center\",\r\n            zindex: 9,\r\n            width: 640,\r\n            height: 480,\r\n          }}\r\n        />\r\n\r\n        <canvas\r\n          ref={canvasRef}\r\n          style={{\r\n            position: \"absolute\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            left: 0,\r\n            right: 0,\r\n\r\n            textAlign: \"center\",\r\n            zindex: 8,\r\n            width: 640,\r\n            height: 480,\r\n          }}\r\n        />\r\n        \r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}